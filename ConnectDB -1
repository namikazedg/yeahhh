package com.tamnt.day4;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Scanner;

public class ConnectDB {

	static final String URL = "jdbc:sqlserver://localhost;databasename=javabasic";
	static final String USER = "sa";
	static final String PW = "Thanhtam96";
	static final String EMAIL_REGEX = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
	Connection con = null;
	Statement stmt = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;

	public Connection getConnect() {
		try {
			con = DriverManager.getConnection(URL, USER, PW);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return con;
	}

	public void insertCandidate() throws UserExceptionBirthday, UserExceptionEmail {
		try {
			con = this.getConnect();
			con.setAutoCommit(false);
			pstmt = con.prepareStatement("insert into candidate values(?,?,?,?,?,?)");

			System.out.print("input candidate id: ");
			String candidateId = new Scanner(System.in).nextLine();
			System.out.print("input full name: ");
			String fullName = new Scanner(System.in).nextLine();
			System.out.print("input birthday: ");
			Date birthday = Date.valueOf(
					new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date(new Scanner(System.in).nextLine())));
			if (birthday.getYear() < 0 || birthday.getYear() > new java.util.Date().getYear()) {
				throw new UserExceptionBirthday();
			}
			System.out.print("input phone: ");
			String phone = new Scanner(System.in).nextLine();
			System.out.print("input email: ");
			String email = new Scanner(System.in).nextLine();
			if (!email.matches(EMAIL_REGEX)) {
				throw new UserExceptionEmail();
			}
			System.out.print("input candidate type: ");
			int candidateType = new Scanner(System.in).nextInt();

			pstmt.setString(1, candidateId);
			pstmt.setString(2, fullName);
			pstmt.setDate(3, birthday);
			pstmt.setString(4, phone);
			pstmt.setString(5, email);
			pstmt.setInt(6, candidateType);
			pstmt.executeUpdate();

			if (candidateType == 0) {
				pstmt = con.prepareStatement("insert into Experience values(?,?,?)");
				System.out.print("input exp in year: ");
				int expInYear = new Scanner(System.in).nextInt();
				System.out.print("input pro skill: ");
				String proSkill = new Scanner(System.in).nextLine();

				pstmt.setString(1, candidateId);
				pstmt.setInt(2, expInYear);
				pstmt.setString(3, proSkill);
				pstmt.executeUpdate();
			} else if (candidateType == 1) {
				pstmt = con.prepareStatement("insert into Fresher values(?,?,?,?)");
				System.out.print("input graduation date: ");
				Date graduationDate = Date.valueOf(new SimpleDateFormat("yyyy-MM-dd")
						.format(new java.util.Date(new Scanner(System.in).nextLine())));
				if (graduationDate.getYear() < 0 || graduationDate.getYear() > new java.util.Date().getYear()) {
					throw new UserExceptionBirthday();
				}
				System.out.print("input graduation rank:");
				String graduationRank = new Scanner(System.in).nextLine();
				System.out.print("input education: ");
				String education = new Scanner(System.in).nextLine();

				pstmt.setString(1, candidateId);
				pstmt.setDate(2, graduationDate);
				pstmt.setString(3, graduationRank);
				pstmt.setString(4, education);
				pstmt.executeUpdate();
			} else if (candidateType == 2) {
				pstmt = con.prepareStatement("insert into intern values(?,?,?,?)");
				System.out.print("input majors: ");
				String majors = new Scanner(System.in).nextLine();
				System.out.print("input semester: ");
				int semester = new Scanner(System.in).nextInt();
				System.out.print("input university name: ");
				String universityName = new Scanner(System.in).nextLine();

				pstmt.setString(4, candidateId);
				pstmt.setString(1, majors);
				pstmt.setInt(2, semester);
				pstmt.setString(3, universityName);
				pstmt.executeUpdate();
			} else {
				System.out.println("Candidate type nhập vào không đúng");
				System.exit(1);
			}

			System.out.print("input certificate number: ");
			int number = new Scanner(System.in).nextInt();
			for (int i = 0; i < number; i++) {
				System.out.println("Certificate " + (i + 1));
				System.out.print("input cerfiticate id: ");
				String certificateID = new Scanner(System.in).nextLine();
				System.out.print("input certificate name: ");
				String certificateName = new Scanner(System.in).nextLine();
				System.out.print("input certificate rank: ");
				String certificateRank = new Scanner(System.in).nextLine();
				System.out.print("input certificate date: ");
				Date certificateDate = Date.valueOf(new SimpleDateFormat("yyyy-MM-dd")
						.format(new java.util.Date(new Scanner(System.in).nextLine())));
				if (certificateDate.getYear() < 0 || certificateDate.getYear() > new java.util.Date().getYear()) {
					throw new UserExceptionBirthday();
				}

				pstmt = con.prepareStatement("insert into certificate values(?,?,?,?,?)");
				pstmt.setString(1, candidateId);
				pstmt.setString(2, certificateID);
				pstmt.setString(3, certificateName);
				pstmt.setString(4, certificateRank);
				pstmt.setDate(5, certificateDate);
				pstmt.executeUpdate();
			}
			Candidate candidate = new Candidate();
			System.out.println("Insert thành công.");
			con.commit();
			con.setAutoCommit(true);
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				con.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}

	}

	public void soLuongUngVien() {
		System.out.println("Có " + Candidate.candidateCount + " ứng viên vừa nhập.");
	}

	public void inDanhSach() {
		System.out.println("Danh sách ứng viên: \n====================");
		con = this.getConnect();
		try {
			pstmt = con.prepareStatement("select * from candidate");
			ResultSet rs1 = pstmt.executeQuery();
			while (rs1.next()) {
				String candidateID = rs1.getString("candidateID");
				String fullName = rs1.getString("fullName");
				Date birthday = rs1.getDate("birthday");
				String phone = rs1.getString("phone");
				String email = rs1.getString("email");
				int candidateType = rs1.getInt("candidateType");
				if (candidateType == 0) {
					pstmt = con.prepareStatement("select * from experience where candidateid=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					Experience experience = null;
					if (rs.next()) {
						int expInYear = rs.getInt("expInYear");
						String proSkill = rs.getString("proSkill");
						experience = new Experience(candidateID, fullName, birthday, phone, email, expInYear, proSkill);
					}
					pstmt = con.prepareStatement("select * from certificate where candidateID=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					while (rs.next()) {
						String certificateID = rs.getString("certificateid");
						String certificateName = rs.getString("certificateName");
						String certificateRank = rs.getString("certificateRank");
						Date certificateDate = rs.getDate("certificateDate");
						Certificate certificate = new Certificate(certificateID, certificateName, certificateRank,
								certificateDate);
						experience.addCertificate(certificate);
					}
					experience.showMe();
				} else if (candidateType == 1) {
					pstmt = con.prepareStatement("select * from fresher where candidateID=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					Fresher fresher = null;
					if (rs.next()) {
						Date graduationDate = rs.getDate("graduationDate");
						String graduationRank = rs.getString("graduationRank");
						String education = rs.getString("education");
						fresher = new Fresher(candidateID, fullName, birthday, phone, email, graduationDate,
								graduationRank, education);
					}
					pstmt = con.prepareStatement("select * from certificate where candidateID=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					while (rs.next()) {
						String certificateID = rs.getString("certificateid");
						String certificateName = rs.getString("certificateName");
						String certificateRank = rs.getString("certificateRank");
						Date certificateDate = rs.getDate("certificateDate");
						Certificate certificate = new Certificate(certificateID, certificateName, certificateRank,
								certificateDate);
						fresher.addCertificate(certificate);
					}
					fresher.showMe();
				} else {
					pstmt = con.prepareStatement("select * from intern where candidateid=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					Intern intern = null;
					if (rs.next()) {
						String majors = rs.getString("majors");
						int semester = rs.getInt("semester");
						String universityName = rs.getString("universityName");
						intern = new Intern(candidateID, fullName, birthday, phone, email, majors, semester,
								universityName);
					}
					pstmt = con.prepareStatement("select * from certificate where candidateID=?");
					pstmt.setString(1, candidateID);
					rs = pstmt.executeQuery();
					while (rs.next()) {
						String certificateID = rs.getString("certificateid");
						String certificateName = rs.getString("certificateName");
						String certificateRank = rs.getString("certificateRank");
						Date certificateDate = rs.getDate("certificateDate");
						Certificate certificate = new Certificate(certificateID, certificateName, certificateRank,
								certificateDate);
						intern.addCertificate(certificate);
					}
					intern.showMe();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Candidate.candidateCount = 0;
	}

	public static void main(String[] args) {

		do {
			ConnectDB connectDB = new ConnectDB();

			System.out.println("\n1. Nhập ứng viên.");
			System.out.println("2. Xem số lượng ứng viên vừa nhập.");
			System.out.println("3. Xem danh sách ứng viên.");
			System.out.println("Gõ exit để thoát.");

			String c = new Scanner(System.in).nextLine();
			switch (c) {
			case "1":
				try {
					connectDB.insertCandidate();
				} catch (UserExceptionBirthday | UserExceptionEmail e) {
					e.printStackTrace();
				} catch (Exception e) {
					System.out.println("The system has encountered an unexpected problem, sincerely sorry !!!");
				}
				break;
			case "2":
				connectDB.soLuongUngVien();
				break;
			case "3":
				connectDB.inDanhSach();
				break;
			case "exit":
				System.exit(1);
			}
		} while (true);
	}

}
